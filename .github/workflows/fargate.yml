# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, on every push to the master branch
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of `ECR_REPOSITORY` in the workflow below with your repository's name.
#    Replace the value of `aws-region` in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the values for `service` and `cluster` in the workflow below with your service and cluster names.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of `task-definition` in the workflow below with your JSON file's name.
#    Replace the value of `container-name` in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Run Deploy
on:
  repository_dispatch:
    types: [deploy]
defaults:
  run:
    shell: bash

jobs:
  # setup:
  #   name: Deploy to ECS
  #   runs-on: ubuntu-latest
  #   env:
  #        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #        AWS_DEFAULT_REGION: ap-southeast-1
  #   steps:

  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Get Github Branch
  #       id: get-branch
  #       run: echo ::set-output name=branch::$(echo "${{ github.event.client_payload.branch }}")

  #     - uses: hashicorp/setup-terraform@v1
  #       with:
  #         terraform_wrapper: false

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ap-southeast-1
      
  #     - name: Terraform Change Workspace Fargate
  #       uses: dflook/terraform-new-workspace@v1
  #       with:
  #         path: "terraform/fargate/"
  #         workspace: ${{ steps.get-branch.outputs.branch }}
  #         backend_config_file: terraform/fargate/backends.tfvars

  #     - name: Terraform Apply Fargate
  #       uses: dflook/terraform-apply@v1
  #       with:
  #         path: "terraform/fargate/"
  #         workspace: ${{ steps.get-branch.outputs.branch }}
  #         auto_approve: true
  #         var_file: 
  #           terraform/fargate/terraform.tfvars 

  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v1

  #     - name: Read secrets from AWS Secrets Manager into environment variables
  #       uses: say8425/aws-secrets-manager-actions@v1
  #       env:
  #         ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  #       with:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         AWS_DEFAULT_REGION: ap-southeast-1
  #         SECRET_NAME: env-production
  #         OUTPUT_PATH: '.env'

  #     - name: Translate ENV variables
  #       run: |
  #         printenv

  #     - name: Build & tag docker image
  #       id: build-image
  #       env:
  #         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #         ECR_REPOSITORY: demo-tf-dev
  #         IMAGE_TAG: demo-tf-dev-${{ github.sha }}

  #       run: |
  #         # Build a docker container and
  #         # push it to ECR so that it can
  #         # be deployed to ECS.
  #         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
  #         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  #         echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  #     - name: Push image to Amazon ECR
  #       id: push-image
  #       env:
  #         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #         ECR_REPOSITORY: demo-tf-dev
  #         IMAGE_TAG: demo-tf-dev-${{ github.sha }}
  #       run: |
  #         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  #         echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  #     - name: Download task definition
  #       run: aws ecs describe-task-definition --task-definition demo-tf-task-dev --query taskDefinition > task-definition.json

  #     - name: Fill in the new image ID in the Amazon ECS task definition
  #       id: update-task-def
  #       uses: aws-actions/amazon-ecs-render-task-definition@v1
  #       with:
  #         task-definition: task-definition.json
  #         container-name: demo-tf-container-dev
  #         image: ${{ steps.push-image.outputs.image }}

  #     - name: Deploy Amazon ECS task definition
  #       id: deploy-task-def
  #       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
  #       with:
  #         task-definition: ${{ steps.update-task-def.outputs.task-definition }}
  #         service: demo-tf-service-dev
  #         cluster: demo-tf-cluster-dev

  deploy-ui:
    name: deploy frontend
    # needs: setup
    runs-on: ubuntu-latest
    defaults: 
      run:
        working-directory: ui

    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Install yarn frontend
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        npm install --global yarn
        yarn install

    - name: Build yarn frontend
      run: yarn build

    - name: Deploy frontend
      uses: jakejarvis/s3-sync-action@master
      with:
        args: --acl public-read --follow-symlinks --delete
      env:
        AWS_S3_BUCKET: demo-react-bucket
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: 'ap-southeast-1'   # optional: defaults to us-east-1
        SOURCE_DIR: 'ui/build'      # optional: defaults to entire repository